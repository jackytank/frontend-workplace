services:
  vite-remix:
    build:
      context: ./remix-frontend
      dockerfile: Dockerfile.prod
    container_name: myshittyapp-remix-frontend
    networks:
      - react-spring
    volumes:
      - ./remix-frontend/app:/myfrontend_dir/app
    ports:
      - "3000:3000"
    tty: true
    depends_on:
      - springboot
    mem_limit: 500M
  springboot:
    build: 
      context: ./springboot-backend
      dockerfile: Dockerfile.prod
    container_name: myshittyapp-springboot
    environment:
      - MY_POSTGRES_HOST=db
      - MY_POSTGRES_PORT=5432
      - MY_POSTGRES_DB=postgres
      - MY_POSTGRES_USER=postgres
      - MY_POSTGRES_PASSWORD=postgres
      - MY_REDIS_HOST=myredis
      - MY_REDIS_PORT=6379
      - MY_REDIS_PASSWORD=mysupersecureredispassword42
    ports:
      - "8080:8080"
    networks:
      - react-spring
      - spring-postgres
    restart: always
    depends_on:
      db:
        condition: service_healthy
      myredis:
        condition: service_healthy
    mem_limit: 1.5G
  db:
    image: postgres:16.2-alpine
    container_name: myshittyapp-postgres-db
    restart: always
    ports:
      - "5555:5432"
    networks:
      - spring-postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    mem_limit: 500M
  myredis: 
    image: redis:7.2.4-alpine
    container_name: myshittyapp-redis
    command: redis-server --requirepass mysupersecureredispassword42
    networks:
      - spring-postgres
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6666:6379"
    volumes:
      - redis-data:/data
    restart: always
    mem_limit: 500M
networks:
  react-spring: {}
  spring-postgres: {}
volumes:
  db-data: {}
  redis-data: {}