Resources:
  LearnCdkBucketD633FD75:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: learn-cdk-bucket
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MyServerlessAppStack/LearnCdkBucket/Resource
  LearnCdkBucketPolicyA743E629:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: LearnCdkBucketD633FD75
      PolicyDocument:
        Statement:
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - LearnCdkBucketD633FD75
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - LearnCdkBucketD633FD75
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: MyServerlessAppStack/LearnCdkBucket/Policy/Resource
  LearnCdkBucketAutoDeleteObjectsCustomResource7E977134:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: LearnCdkBucketD633FD75
    DependsOn:
      - LearnCdkBucketPolicyA743E629
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MyServerlessAppStack/LearnCdkBucket/AutoDeleteObjectsCustomResource/Default
  LearnCdkBucketNotifications4E210B38:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: LearnCdkBucketD633FD75
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - s3:ObjectCreated:Put
            LambdaFunctionArn:
              Fn::GetAtt:
                - MyFunction3BAA72D1
                - Arn
      Managed: true
      SkipDestinationValidation: false
    DependsOn:
      - LearnCdkBucketAllowBucketNotificationsToMyServerlessAppStackMyFunction12E26635125FF798
      - LearnCdkBucketPolicyA743E629
    Metadata:
      aws:cdk:path: MyServerlessAppStack/LearnCdkBucket/Notifications/Resource
  LearnCdkBucketAllowBucketNotificationsToMyServerlessAppStackMyFunction12E26635125FF798:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - MyFunction3BAA72D1
          - Arn
      Principal: s3.amazonaws.com
      SourceAccount: "033237493133"
      SourceArn:
        Fn::GetAtt:
          - LearnCdkBucketD633FD75
          - Arn
    Metadata:
      aws:cdk:path: MyServerlessAppStack/LearnCdkBucket/AllowBucketNotificationsToMyServerlessAppStackMyFunction12E26635
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MyServerlessAppStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-033237493133-us-east-2
        S3Key: faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
          - Arn
      Runtime: nodejs20.x
      Description:
        Fn::Join:
          - ""
          - - "Lambda function for auto-deleting objects in "
            - Ref: LearnCdkBucketD633FD75
            - " S3 bucket."
    DependsOn:
      - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      aws:cdk:path: MyServerlessAppStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
      aws:asset:path: asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6
      aws:asset:property: Code
  MyFunctionServiceRole3C357FF2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MyServerlessAppStack/MyFunction/ServiceRole/Resource
  MyFunctionServiceRoleDefaultPolicyB705ABD4:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - LearnCdkBucketD633FD75
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - LearnCdkBucketD633FD75
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: MyFunctionServiceRoleDefaultPolicyB705ABD4
      Roles:
        - Ref: MyFunctionServiceRole3C357FF2
    Metadata:
      aws:cdk:path: MyServerlessAppStack/MyFunction/ServiceRole/DefaultPolicy/Resource
  MyFunction3BAA72D1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-033237493133-us-east-2
        S3Key: 9e666f59ad1e0104760ff5bc9045838d9e63649808eacb823580f61255c90a4d.zip
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: LearnCdkBucketD633FD75
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - MyFunctionServiceRole3C357FF2
          - Arn
      Runtime: python3.12
    DependsOn:
      - MyFunctionServiceRoleDefaultPolicyB705ABD4
      - MyFunctionServiceRole3C357FF2
    Metadata:
      aws:cdk:path: MyServerlessAppStack/MyFunction/Resource
      aws:asset:path: asset.9e666f59ad1e0104760ff5bc9045838d9e63649808eacb823580f61255c90a4d
      aws:asset:is-bundled: false
      aws:asset:property: Code
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MyServerlessAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: MyServerlessAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |-
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'
          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              notification_configuration = props["NotificationConfiguration"]
              managed = props.get('Managed', 'true').lower() == 'true'
              skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'
              stack_id = event['StackId']
              old = event.get("OldResourceProperties", {}).get("NotificationConfiguration", {})
              if managed:
                config = handle_managed(event["RequestType"], notification_configuration)
              else:
                config = handle_unmanaged(props["BucketName"], stack_id, event["RequestType"], notification_configuration, old)
              s3.put_bucket_notification_configuration(Bucket=props["BucketName"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):
            def get_id(n):
              n['Id'] = ''
              sorted_notifications = sort_filter_rules(n)
              strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('"Name": "prefix"', '"Name": "Prefix"').replace('"Name": "suffix"', '"Name": "Suffix"')
              return f"{stack_id}-{hash(strToHash)}"
            def with_id(n):
              n['Id'] = get_id(n)
              return n

            external_notifications = {}
            existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)
            for t in CONFIGURATION_TYPES:
              if request_type == 'Update':
                  old_incoming_ids = [get_id(n) for n in old.get(t, [])]
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      
              elif request_type == 'Delete':
                  external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]
              elif request_type == 'Create':
                  external_notifications[t] = [n for n in existing_notifications.get(t, [])]
            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            if request_type == 'Delete':
              return external_notifications

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))

          def sort_filter_rules(json_obj):
            if not isinstance(json_obj, dict):
                return json_obj
            for key, value in json_obj.items():
                if isinstance(value, dict):
                    json_obj[key] = sort_filter_rules(value)
                elif isinstance(value, list):
                    json_obj[key] = [sort_filter_rules(item) for item in value]
            if "Filter" in json_obj and "Key" in json_obj["Filter"] and "FilterRules" in json_obj["Filter"]["Key"]:
                filter_rules = json_obj["Filter"]["Key"]["FilterRules"]
                sorted_filter_rules = sorted(filter_rules, key=lambda x: x["Name"])
                json_obj["Filter"]["Key"]["FilterRules"] = sorted_filter_rules
            return json_obj
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: MyServerlessAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  websiteBucket74B0F9E5:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: learn-cdk-website-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
      Tags:
        - Key: aws-cdk:auto-delete-objects
          Value: "true"
        - Key: aws-cdk:cr-owned:48682d4e
          Value: "true"
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MyServerlessAppStack/websiteBucket/Resource
  websiteBucketPolicy112A7E46:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: websiteBucket74B0F9E5
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS: "*"
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - websiteBucket74B0F9E5
                      - Arn
                  - /*
          - Action:
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:List*
              - s3:PutBucketPolicy
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
                  - Arn
            Resource:
              - Fn::GetAtt:
                  - websiteBucket74B0F9E5
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - websiteBucket74B0F9E5
                        - Arn
                    - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: MyServerlessAppStack/websiteBucket/Policy/Resource
  websiteBucketAutoDeleteObjectsCustomResource3492E703:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
          - Arn
      BucketName:
        Ref: websiteBucket74B0F9E5
    DependsOn:
      - websiteBucketPolicy112A7E46
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MyServerlessAppStack/websiteBucket/AutoDeleteObjectsCustomResource/Default
  DeployWebsiteAwsCliLayer17DBC421:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: cdk-hnb659fds-assets-033237493133-us-east-2
        S3Key: a8803356d66dc4f7473f836fc7e3391429b67f4c1423406f678cf6b5f5e14081.zip
      Description: /opt/awscli/aws
    Metadata:
      aws:cdk:path: MyServerlessAppStack/DeployWebsite/AwsCliLayer/Resource
      aws:asset:path: asset.a8803356d66dc4f7473f836fc7e3391429b67f4c1423406f678cf6b5f5e14081.zip
      aws:asset:is-bundled: false
      aws:asset:property: Content
  DeployWebsiteCustomResourceD116527B:
    Type: Custom::CDKBucketDeployment
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536
          - Arn
      SourceBucketNames:
        - cdk-hnb659fds-assets-033237493133-us-east-2
      SourceObjectKeys:
        - c81d96596ec7ef414b812b9c01892c8c4bec0c132d0226dac21baa8e8118117a.zip
      DestinationBucketName:
        Ref: websiteBucket74B0F9E5
      Prune: true
      OutputObjectKeys: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: MyServerlessAppStack/DeployWebsite/CustomResource/Default
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: MyServerlessAppStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
            Effect: Allow
            Resource:
              - arn:aws:s3:::cdk-hnb659fds-assets-033237493133-us-east-2
              - arn:aws:s3:::cdk-hnb659fds-assets-033237493133-us-east-2/*
          - Action:
              - s3:Abort*
              - s3:DeleteObject*
              - s3:GetBucket*
              - s3:GetObject*
              - s3:List*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - websiteBucket74B0F9E5
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - websiteBucket74B0F9E5
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      Roles:
        - Ref: CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: MyServerlessAppStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource
  CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: cdk-hnb659fds-assets-033237493133-us-east-2
        S3Key: c6358465bf49dfae556bb430bf9c81fa578c221b82c308e3707901b1dd654762.zip
      Environment:
        Variables:
          AWS_CA_BUNDLE: /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      Handler: index.handler
      Layers:
        - Ref: DeployWebsiteAwsCliLayer17DBC421
      Role:
        Fn::GetAtt:
          - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
          - Arn
      Runtime: python3.11
      Timeout: 900
    DependsOn:
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF
      - CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265
    Metadata:
      aws:cdk:path: MyServerlessAppStack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource
      aws:asset:path: asset.c6358465bf49dfae556bb430bf9c81fa578c221b82c308e3707901b1dd654762
      aws:asset:is-bundled: false
      aws:asset:property: Code
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1WPT2+DMAzFP0vvwaOt1nvL1NOkIZB2RWkwyCUkVZwUIcR3n/gj2p3ez/az5XeA/ekT4p3sOFJlE2m6wZB7qRohOy4GPsJwCapBL5LKrLRIajWp/tVe66W4SMZRaNneSglDUpkUXUvMZI24BqP8BEll3vlb9uh+0c2mnEyt0dvNMQqSLQyZ1TiZZ329sNAo+FgMkhk9w3kSUeJD275F42H57GtrjKNIAnvbZsg2OLXc3fjfKHX2SSW6KZeYL+de1mRq8b78E/wj+DV2oac8hexYaYJzx4mmOeIojC0R7vzxPMSwP0G8uzNR5ILx1CJki/4BdUvr1psBAAA=
    Metadata:
      aws:cdk:path: MyServerlessAppStack/CDKMetadata/Default
Outputs:
  WebsiteBucket:
    Description: The bucket to host the static website
    Value:
      Ref: websiteBucket74B0F9E5
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]

